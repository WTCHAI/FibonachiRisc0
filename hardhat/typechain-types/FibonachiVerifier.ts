/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FibonachiVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFinalizeFibonachiResult"
      | "imageId"
      | "verifier"
      | "verifyAndFinalizeFibonachi"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProofSubmittedLogged"): EventFragment;

  encodeFunctionData(
    functionFragment: "getFinalizeFibonachiResult",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "imageId", values?: undefined): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyAndFinalizeFibonachi",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFinalizeFibonachiResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "imageId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndFinalizeFibonachi",
    data: BytesLike
  ): Result;
}

export namespace ProofSubmittedLoggedEvent {
  export type InputTuple = [
    prover: AddressLike,
    timestamp: BigNumberish,
    status: boolean
  ];
  export type OutputTuple = [
    prover: string,
    timestamp: bigint,
    status: boolean
  ];
  export interface OutputObject {
    prover: string;
    timestamp: bigint;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FibonachiVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): FibonachiVerifier;
  waitForDeployment(): Promise<this>;

  interface: FibonachiVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFinalizeFibonachiResult: TypedContractMethod<[], [bigint], "view">;

  imageId: TypedContractMethod<[], [string], "view">;

  verifier: TypedContractMethod<[], [string], "view">;

  verifyAndFinalizeFibonachi: TypedContractMethod<
    [seal: BytesLike, journal: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFinalizeFibonachiResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "imageId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyAndFinalizeFibonachi"
  ): TypedContractMethod<
    [seal: BytesLike, journal: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProofSubmittedLogged"
  ): TypedContractEvent<
    ProofSubmittedLoggedEvent.InputTuple,
    ProofSubmittedLoggedEvent.OutputTuple,
    ProofSubmittedLoggedEvent.OutputObject
  >;

  filters: {
    "ProofSubmittedLogged(address,uint256,bool)": TypedContractEvent<
      ProofSubmittedLoggedEvent.InputTuple,
      ProofSubmittedLoggedEvent.OutputTuple,
      ProofSubmittedLoggedEvent.OutputObject
    >;
    ProofSubmittedLogged: TypedContractEvent<
      ProofSubmittedLoggedEvent.InputTuple,
      ProofSubmittedLoggedEvent.OutputTuple,
      ProofSubmittedLoggedEvent.OutputObject
    >;
  };
}
